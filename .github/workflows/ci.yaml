name: 🧪 CI

on:
  # Actually this should be triggered on pull requests, but I don't want to spend too much time on this repo
  push:
    branches: [main, development]
  # pull_request:
  #   branches: [main, development]

# Global environment variables
env:
  # Add timeout for the entire workflow
  ACTIONS_RUNNER_TIMEOUT: 10m

# Concurrency settings to prevent multiple workflows running for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: 🛠️ Run Python CI
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: mb_db
          POSTGRES_USER: mb_user
          POSTGRES_PASSWORD: mb_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1425:5432

    steps:
      # Checkout code
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for better versioning

      # Setup Python environment
      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'  # Enable caching for faster builds

      # Install system dependencies
      - name: 📂 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y make postgresql-client
        continue-on-error: false

      # Cache pip dependencies
      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install Python dependencies
      - name: 📦 Install Python dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
        continue-on-error: false

      # Set environment variables for testing
      - name: 📝 Set environment variables
        run: |
          echo "POSTGRES_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "POSTGRES_PORT=1425" >> $GITHUB_ENV
          echo "POSTGRES_DB=mb_db" >> $GITHUB_ENV
          echo "POSTGRES_USER=mb_user" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=mb_password" >> $GITHUB_ENV
          echo "DB_POOL_MIN_SIZE=1" >> $GITHUB_ENV
          echo "DB_POOL_MAX_SIZE=10" >> $GITHUB_ENV
          echo "DB_POOL_MAX_IDLE=300" >> $GITHUB_ENV
          echo "DB_POOL_TIMEOUT=30" >> $GITHUB_ENV
          echo "ENV=test" >> $GITHUB_ENV
          echo "PORT=8000" >> $GITHUB_ENV

      # Wait for PostgreSQL to be ready
      - name: ⏳ Wait for PostgreSQL
        run: |
          until pg_isready -h 127.0.0.1 -p 1425 -U mb_user -d mb_db; do
            echo "Waiting for PostgreSQL to be ready..."
            sleep 2
          done

      # Run linting
      - name: 🔍 Run linting
        run: |
          flake8 app/ test/ main.py
          mypy app/ test/ main.py
        continue-on-error: false

      # Run security checks
      - uses: actions/checkout@main
      - name: 🔒 Run security checks
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

      # Generate Junit reports
      - name: 📝 Generate Junit reports
        run: |
          pytest --cov --junitxml=junit.xml -o junit_family=legacy
        continue-on-error: false

      # Upload test results to Codecov
      - name: 📤 Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      # Run tests and generate coverage
      - name: 🧪 Run tests and generate coverage
        run: |
          python -m pytest ./test/ -v --cov=. --cov-report=term-missing --cov-report=html --cov-report=json
        continue-on-error: false

      # Upload test coverage reports
      - name: 📤 Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            .coverage
            coverage.json
          retention-days: 7  # Keep artifacts for 7 days

      # Upload coverage reports to Codecov
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}